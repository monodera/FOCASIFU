#!/usr/bin/env python2
from astropy.io import fits
import numpy as np
import focasifu as fi
import os

file = fi.filibdir+'dustposition.fits'
if os.path.exists(file):
    print('Do you want to overwrite %s? :[y/n]'%file)
    key = raw_input()
    if key == 'y' or key =='Y':
        print('Removing')
        os.remove(file)

badpix1 = np.array([\
[735, 3145],
[735, 3144],
[736, 3145],
[736, 3146],
[735, 3146],
[735, 3143],
[736, 3142],
[737, 3142],
[737, 3144],
[736, 3144],
[736, 3143],
[737, 3143],
[268, 2687],
[268, 2686],
[268, 2685],
[268, 2684],
[267, 2686],
[267, 2685],
[269, 2686],
[173, 1868],
[173, 1867],
[174, 1868],
[174, 1867],
[174, 1866],
[175, 1868],
[175, 1867],
[240, 1826],
[241, 1827],
[241, 1826],
[242, 1826],
[242, 1827],
[242, 1825],
[243, 1825],
[244, 1825],
[244, 1824],
[243, 1824],
[243, 1823],
[244, 1823],
[243, 1822],
[243, 1821],
[243, 1820],
[242, 1821],
[242, 1820],
[242, 1819],
[241, 1820],
[241, 1819],
[241, 1818],
[240, 1819],
[240, 1818],
[240, 1817],
[239, 1818],
[239, 1817],
[239, 1816],
[239, 1815],
[238, 1818],
[238, 1817],
[238, 1816],
[241, 1825],
[242, 1828],
[241, 1828],
[458, 1122],
[458, 1121],
[457, 1121],
[457, 1120],
[457, 1120],
[804, 846],
[805, 847],
[805, 846],
[805, 845],
[805, 844],
[806, 847],
[806, 846],
[806, 845],
[806, 844],
[807, 844],
[807, 845],
[807, 846],
[807, 847],
[808, 847],
[808, 846],
[808, 845],
[808, 845],
[520, 460],
[520, 459],
[521, 459],
[521, 458],
[522, 459],
[522, 458],
[522, 457],
[522, 456],
[523, 459],
[523, 458],
[523, 458],
[523, 457],
[523, 456],
[523, 456],
[523, 455],
[523, 455],
[523, 454],
[523, 454],
[523, 453],
[524, 454],
[524, 453],
[524, 452],
[524, 451],
[524, 450],
[524, 449],
[524, 448],
[523, 449],
[523, 448],
[523, 447],
[522, 447],
[522, 446],
[521, 446],
[521, 445],
[521, 444],
[520, 445],
[520, 444],
[520, 443],
[520, 445],
[520, 444],
[520, 443],
[519, 445],
[519, 444],
[519, 443],
[518, 445],
[518, 444],
[518, 443],
[517, 445],
[517, 444],
[516, 444],
[516, 443],
[517, 443],
[517, 443],
[604, 258],
[604, 257],
[604, 256],
[603, 257],
[603, 258],
[606, 256],
[198, 449],
[198, 448],
[198, 447],
[199, 449],
[199, 448],
[734, 625],
[734, 624],
[683, 3441],
[683, 3440],
[683, 3439],
[684, 3374],
[684, 3373],
[684, 3378],
[684, 3377],
[397, 2386],
[397, 2385],
[397, 2384],
[397, 2383],
[397, 2382],
[397, 2381],
[397, 2380],
[397, 2379],
[397, 2378],
[397, 2377]])

baddata = np.zeros((4210, 1024))
for i in range(badpix1.shape[0]):
    baddata[badpix1[i,1]-1, badpix1[i,0]-1] = 1

# Creating HDU data
outhdu = fits.PrimaryHDU(data=baddata)
outhdl = fits.HDUList([outhdu])
outhdl.writeto(file)
outhdl.close()

file = fi.filibdir+'dastposition2.fits'
if os.path.exists(file):
    print('Do you want to overwrite %s? :[y/n]'%file)
    key = raw_input()
    if key == 'y' or key =='Y':
        os.remove(file)

badpix2 = np.array([\
[486, 183],
[486, 182],
[486, 181],
[487, 182],
[487, 183],
[956, 830],
[956, 829],
[955, 829],
[955, 828],
[954, 828],
[954, 827],
[954, 826],
[954, 825],
[953, 828],
[953, 827],
[953, 826],
[953, 825],
[953, 824],
[952, 826],
[952, 825],
[952, 824],
[726, 1222],
[726, 1221],
[726, 1220],
[725, 1221],
[725, 1220],
[725, 1219],
[724, 1220],
[724, 1219],
[724, 1218],
[723, 1219],
[723, 1218],
[723, 1217],
[722, 1224],
[722, 1223],
[722, 1222],
[722, 1221],
[722, 1220],
[722, 1219],
[722, 1218],
[721, 1223],
[721, 1222],
[721, 1222],
[984, 1593],
[984, 1592],
[910, 60],
[910, 61],
[910, 59],
[911, 59],
[911, 60],
[911, 61],
[893, 275],
[893, 274],
[757, 1581],
[757, 1580],
[298, 1704],
[298, 1703],
[298, 1702],
[297, 1702],
[297, 1701],
[297, 1700],
[298, 1700],
[298, 1699],
[338, 1870],
[338, 1869],
[338, 1868],
[338, 1867],
[338, 1866],
[338, 1865],
[337, 1869],
[337, 1868],
[337, 1867],
[337, 1866],
[592, 2563],
[592, 2562],
[591, 2563],
[591, 2562],
[590, 2564],
[590, 2563],
[590, 2562],
[589, 2564],
[589, 2563],
[589, 2562],
[588, 2564],
[588, 2563],
[588, 2562],
[586, 3107],
[586, 3106],
[585, 3108],
[585, 3107],
[585, 3106],
[305, 3566],
[305, 3565],
[292, 3675],
[292, 3674],
[292, 3673],
[292, 3672],
[292, 3671],
[291, 3675],
[291, 3674],
[291, 3673],
[291, 3672],
[293, 3673],
[293, 3672],
[591, 85],
[303, 92],
[876, 129],
[539, 178],
[359, 279],
[359, 278],
[360, 278],
[360, 277],
[360, 276],
[360, 275],
[361, 275],
[361, 276],
[300, 340],
[300, 339],
[368, 718],
[264, 800],
[291, 782],
[291, 781],
[408, 815],
[497, 828],
[655, 1058],
[968, 1008],
[936, 1095],
[606, 1180],
[727, 1222],
[619, 1458],
[893, 1454],
[582, 1543],
[269, 1515],
[582, 1543],
[402, 1596],
[298, 1698],
[461, 1719],
[461, 1720],
[461, 1721],
[755, 1926],
[970, 2049],
[599, 2190],
[293, 2213],
[419, 2241],
[419, 2242],
[461, 2291],
[461, 2292],
[461, 2293],
[461, 2294],
[562, 2290],
[539, 2335],
[797, 2279],
[938, 2395],
[589, 2561],
[588, 2561],
[587, 2563],
[591, 2564],
[300, 2776],
[715, 2883],
[727, 2875],
[477, 3065],
[181, 2883],
[181, 2882],
[181, 2881],
[182, 2883],
[182, 2882],
[182, 2881],
[585, 3105],
[586, 3105],
[476, 3114],
[307, 3142],
[299, 3217],
[723, 3181],
[819, 3168],
[949, 3335],
[949, 3336],
[934, 3400],
[934, 3401],
[1001, 3559],
[299, 3217],
[335, 3396],
[335, 3397],
[470, 3406],
[337, 1870],
[337, 1865],
[338, 1864],
[339, 1869],
[339, 1868],
[339, 1867],
[339, 1866],
[339, 1865],
[354, 2217],
[354, 2218],
[354, 2219],
[353, 2217],
[353, 2218],
[293, 2212],
[294, 2212],
[294, 2213],
[354, 2217],
[354, 2218],
[354, 2219],
[353, 2218],
[353, 2217],
[419, 2240],
[419, 2243],
[460, 2291],
[460, 2292],
[460, 2293],
[460, 2294],
[462, 2294],
[462, 2293],
[462, 2292],
[462, 2291],
[539, 2336],
[539, 2334],
[562, 2289],
[561, 2289],
[561, 2290],
[620, 2222],
[620, 2223],
[599, 2191],
[755, 1927],
[755, 1925],
[754, 1926],
[797, 2278],
[797, 2280],
[796, 2279],
[970, 2048],
[970, 2050],
[938, 2396],
[938, 2394],
[499, 231],
[499, 232],
[499, 233],
[499, 234],
[339, 655],
[339, 654],
[426, 634],
[324, 1218],
[324, 1219],
[325, 1220],
[325, 1219],
[325, 1218],
[443, 1219],
[443, 1218],
[407, 817],
[407, 816],
[407, 814],
[407, 815],
[408, 816],
[476, 829],
[476, 828],
[475, 828],
[471, 1008],
[471, 1009],
[606, 1179],
[865, 953],
[866, 953],
[865, 952],
[936, 1096],
[936, 1094],
[955, 827],
[956, 828],
[956, 827],
[954, 829],
[952, 823],
[952, 827],
[952, 828],
[968, 1007],
[969, 1008]])

baddata = np.zeros((4210, 1024))
for i in range(badpix2.shape[0]):
    baddata[badpix2[i,1]-1, badpix2[i,0]-1] = 1

# Creating HDU data
outhdu = fits.PrimaryHDU(data=baddata)
outhdl = fits.HDUList([outhdu])
#outhdl.writeto(file)
outhdl.close()
